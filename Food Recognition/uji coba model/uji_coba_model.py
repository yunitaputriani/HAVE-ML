# -*- coding: utf-8 -*-
"""Uji coba model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FPy00enQ6nV0kx7-ibRUHYlsYz8E1JVn
"""

from google.colab import files
import numpy as np
import tensorflow as tf
from PIL import Image
import json
import io

# Load the TFLite model
interpreter = tf.lite.Interpreter(model_path='foods_model_with_metadata.tflite')
interpreter.allocate_tensors()

# Get input and output tensors
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

# Load class indices from JSON file


with open('class_indices.json', 'r') as f:
    class_indices = json.load(f)

# Inverse class indices to get class name from prediction
class_names = {v: k for k, v in class_indices.items()}

# Function to preprocess the image and run the prediction
def predict_food_from_uploaded_image(image_bytes):
    # Load and preprocess the uploaded image
    img = Image.open(io.BytesIO(image_bytes)).resize((128, 128))
    img = np.array(img, dtype=np.float32) / 255.0
    img = np.expand_dims(img, axis=0)

    # Set the input tensor
    interpreter.set_tensor(input_details[0]['index'], img)

    # Run inference
    interpreter.invoke()

    # Get the output tensor
    output_data = interpreter.get_tensor(output_details[0]['index'])
    predicted_class_index = np.argmax(output_data)

    # Map the predicted class index to class name
    #predicted_class_name = class_indices[str(predicted_class_index)]
    predicted_class_name = class_names[predicted_class_index]


    return predicted_class_name

# Function to display prediction
def display_prediction(image_bytes):
    predicted_food = predict_food_from_uploaded_image(image_bytes)
    print(f"The predicted food is: {predicted_food}")

# Upload image
uploaded_files = files.upload()

# Process uploaded image and display prediction
for name, data in uploaded_files.items():
    print('User uploaded file "{name}" with length {length} bytes'.format(name=name, length=len(data)))
    display_prediction(data)